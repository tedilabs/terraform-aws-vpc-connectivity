output "id" {
  description = "The ID of the service."
  value       = aws_vpclattice_service.this.id
}

output "arn" {
  description = "The ARN of the service."
  value       = aws_vpclattice_service.this.arn
}

output "name" {
  description = "The name of the service."
  value       = aws_vpclattice_service.this.name
}

output "description" {
  description = "The description of the service."
  value       = var.description
}

output "status" {
  description = "The status of the service."
  value       = aws_vpclattice_service.this.status
}

output "auth_type" {
  description = "The type of authentication and authorization that manages client access to the service."
  value       = aws_vpclattice_service.this.auth_type
}

output "domain" {
  description = "The DNS name of the service."
  value       = one(aws_vpclattice_service.this.dns_entry[*].domain_name)
}

output "zone_id" {
  description = "The canonical hosted zone ID of the service to be used in a Route 53 CNAME record."
  value       = one(aws_vpclattice_service.this.dns_entry[*].hosted_zone_id)
}

output "custom_domain" {
  description = "The configuration for a custom domain name to use in addition to the domain name that is generated by VPC Lattice."
  value = {
    name            = aws_vpclattice_service.this.custom_domain_name
    tls_certificate = aws_vpclattice_service.this.certificate_arn
  }
}

output "service_network_associations" {
  description = <<EOF
  The configuration for the service network associations with the service.
    `id` - The ID of the association.
    `arn` - The ARN of the Association.
    `status` - The operations status. Valid Values are `CREATE_IN_PROGRESS`, `ACTIVE`, `DELETE_IN_PROGRESS`, `CREATE_FAILED`, `DELETE_FAILED`.
    `created_by` - The principal that created the association.

    `service_network` - The ARN (Amazon Resource Name) of the service network.
  EOF
  value = {
    for name, association in aws_vpclattice_service_network_service_association.this :
    name => {
      id         = association.id
      arn        = association.arn
      status     = association.status
      created_by = association.created_by

      service_network = association.service_network_identifier
    }
  }
}

output "listeners" {
  description = <<EOF
  The configuration for listeners of the service.
    `id` - The ID of the service listener.
    `arn` - The ARN of the service listener.
    `name` - The name of the service listener.
    `port` - The number of port on which the listener of the service is listening.
    `protocol` - The protocol for the service listener.
    `default_action` - The configuration for default routing action of the service listener.
    `rules` - The list of rules to enable content-based routing to the target groups that make up the service.
    `created_at` - Date and time that the listener was created, specified in ISO-8601 format.
    `updated_at` - Date and time that the listener was last updated, specified in ISO-8601 format.
  EOF
  value = {
    for name, listener in module.listener :
    name => {
      id   = listener.id
      arn  = listener.arn
      name = name

      port     = listener.port
      protocol = listener.protocol

      default_action = listener.default_action
      rules          = listener.rules

      created_at = listener.created_at
      updated_at = listener.updated_at
    }
  }
}

output "logging" {
  description = <<EOF
  The configuration for access logs of the service.
    `cloudwatch` - The configuration for access logs to be sent to Amazon CloudWatch Log Group.
    `kinesis_data_firehose` - The configuration for access logs to be sent to Amazon Kinesis Data Firehose Delivery Stream.
    `s3` - The configuration for access logs to be sent to Amazon S3 BUcket.
  EOF
  value = {
    cloudwatch = one([
      for subscription in aws_vpclattice_access_log_subscription.cloudwatch : {
        enabled   = var.logging_to_cloudwatch.enabled
        id        = subscription.id
        arn       = subscription.arn
        log_group = subscription.destination_arn
      }
    ])
    kinesis_data_firehose = one([
      for subscription in aws_vpclattice_access_log_subscription.kinesis_data_firehose : {
        enabled   = var.logging_to_kinesis_data_firehose.enabled
        id        = subscription.id
        arn       = subscription.arn
        log_group = subscription.destination_arn
      }
    ])
    s3 = one([
      for subscription in aws_vpclattice_access_log_subscription.s3 : {
        enabled   = var.logging_to_s3.enabled
        id        = subscription.id
        arn       = subscription.arn
        log_group = subscription.destination_arn
      }
    ])
  }
}

output "sharing" {
  description = <<EOF
  The configuration for sharing of the Lattice service.
    `status` - An indication of whether the Lattice service is shared with other AWS accounts, or was shared with the current account by another AWS account. Sharing is configured through AWS Resource Access Manager (AWS RAM). Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`.
    `shares` - The list of resource shares via RAM (Resource Access Manager).
  EOF
  value = {
    status = length(module.share) > 0 ? "SHARED_BY_ME" : "NOT_SHARED"
    shares = module.share
  }
}
